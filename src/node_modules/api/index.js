const cars = require("./data/data.json");

async function sleep(seconds) {
  return new Promise(resolve => {
    setTimeout(resolve, seconds * 1000);
  });
}

const vehicles = Object.freeze(cars);

const filteredManufacturers = (list, uniqueList) =>
  [...uniqueList].map(make => {
    const number = [...list].filter(newMake => newMake.make === make).length;

    return {
      manufacturer: make,
      number
    };
  });

const filteredVehicleTypes = (list, uniqueList) =>
  [...uniqueList].map(category => {
    const number = [...list].filter(newMake => newMake.category === category)
      .length;

    return {
      category,
      number
    };
  });

module.exports.getVehicles = async function getCarDetails(query) {
  await sleep(Math.random());
  //Get the total vehicles
  let result = vehicles;

  //Get the vehicle make

  let vehicleMake = vehicles.map(({ make }) => make);
  let vehicleType = vehicles.map(({ category }) => category);
  let uniqueVehicleTypes = Array.from(new Set(vehicleType));
  let uniqueManufacturers = Array.from(new Set(vehicleMake));
  let manufacturers = filteredManufacturers(result, uniqueManufacturers);
  let vehicleTypes = filteredVehicleTypes(result, uniqueVehicleTypes);

  if (query) {
    const params = new window.URLSearchParams(query);
    const search = params.get("search");
    const page = params.get("page");
    const search_manufacturers = params.getAll("manufacturers");
    const search_vehicle_types = params.getAll("vehicle_type");

    // const filterConditon = vehicle =>
    const searchConditon = vehicle =>
      `${vehicle.make}`
        .toLocaleLowerCase()
        .includes(`${search.toLocaleLowerCase()}`) ||
      `${vehicle.model}`
        .toLocaleLowerCase()
        .includes(`${search.toLocaleLowerCase()}`);

    if (search) {
      const vehiclesBySearch = vehicles.filter(vehicle =>
        searchConditon(vehicle)
      );
      result = vehiclesBySearch;
    }

    manufacturers = filteredManufacturers(result, uniqueManufacturers);
    vehicleTypes = filteredVehicleTypes(result, uniqueVehicleTypes);

    if (search_manufacturers && search_manufacturers.length > 0) {
      result = result.filter(
        ({ make }) => search_manufacturers.indexOf(make) > -1
      );
    }

    if (search_vehicle_types && search_vehicle_types.length > 0) {
      result = result.filter(
        ({ category }) => search_vehicle_types.indexOf(category) > -1
      );
    }

    if (page) {
      const maxPagesNumber = Math.ceil(result.length / 5);
      if (Number(page) < maxPagesNumber) {
        const startIndex = (Number(page) - 1) * 5;
        const endIndex = (Number(page) - 1) * 5 + 5;
        const vehiclesByPage = result.slice(startIndex, endIndex);

        result = vehiclesByPage;
      } else if (Number(page) >= maxPagesNumber) {
        const startIndex = (Number(maxPagesNumber) - 1) * 5;
        const endIndex = (Number(maxPagesNumber) - 1) * 5 + 5;
        const vehiclesByPage = result.slice(startIndex, endIndex);

        result = vehiclesByPage;
      }
    }
  }

  return { vehicles: result, manufacturers, vehicleTypes };
};
